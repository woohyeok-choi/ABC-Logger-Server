syntax = "proto3";

package kaist.iclab.abclogger;

option java_package = "kaist.iclab.abclogger.grpc";
option java_outer_classname = "DatumProto";

message Empty { }

message Datum {
    enum Type {
        UNKNOWN_DATA = 0;
        PHYSICAL_ACTIVITY_TRANSITION = 1;
        PHYSICAL_ACTIVITY = 2;
        APP_USAGE_EVENT = 3;
        BATTERY = 4;
        BLUETOOTH = 5;
        CALL_LOG = 6;
        DEVICE_EVENT = 7;
        EXTERNAL_SENSOR = 8;
        INSTALLED_APP = 9;
        KEY_LOG = 10;
        LOCATION = 11;
        MEDIA = 12;
        MESSAGE = 13;
        NOTIFICATION = 14;
        PHYSICAL_STAT = 15;
        INTERNAL_SENSOR = 16;
        SURVEY = 17;
        DATA_TRAFFIC = 18;
        WIFI = 19;
    }

    message PhysicalActivityTransition {
        string type = 1;
        bool is_entered = 2;
    }

    message PhysicalActivity {
        string type = 1;
        int32 confidence = 2;
    }

    message AppUsageEvent {
        string name = 1;
        string package_name = 2;
        string type = 3;
        bool is_system_app = 4;
        bool is_updated_system_app = 5;
    }

    message Battery {
        int32 level = 1;
        int32 scale = 2;
        int32 temperature = 3;
        int32 voltage = 4;
        string health = 5;
        string plugged_type = 6;
        string status = 7;
    }

    message Bluetooth {
        string device_name = 1;
        string address = 2;
        int32 rssi = 3;
    }

    message CallLog {
        int64 duration = 1;
        string number = 2;
        string type = 3;
        string presentation = 4;
        int64 data_usage = 5;
        string contact_type = 6;
        bool is_starred = 7;
        bool is_pinned = 8;
    }

    message DeviceEvent {
        string type = 1;
    }

    message ExternalSensor {
        string sensor_id = 1;
        string name = 2;
        string description = 3;
        float first_value = 4;
        float second_value = 5;
        float third_value = 6;
        float fourth_value = 7;
    }

    message InstalledApp {
        string name = 1;
        string package_name = 2;
        bool is_system_app = 3;
        bool is_updated_system_app = 4;
        int64 first_install_time = 5;
        int64 last_update_time = 6;
    }

    message InternalSensor {
        string type = 1;
        string accuracy = 2;
        float first_value = 3;
        float second_value = 4;
        float third_value = 5;
        float fourth_value = 6;
    }

    message KeyLog {
        string name = 1;
        string package_name = 2;
        bool is_system_app = 3;
        bool is_updated_system_app = 4;
        float distance = 5;
        int64 time_taken = 6;
        string keyboard_type = 7;
        string prev_key = 8;
        string current_key = 9;
        string prev_key_type = 10;
        string current_key_type = 11;
    }

    message Location {
        double latitude = 1;
        double longitude = 2;
        double altitude = 3;
        float accuracy = 4;
        float speed = 5;
    }    

    message Media {
        string mime_type = 1;
    }

    message Message {
        string number = 1;
        string message_class = 2;
        string message_box = 3;
        string contact_type = 4;
        bool is_starred = 5;
        bool is_pinned = 6;
    }

    message Notification {
        string name = 1;
        string package_name = 2;
        bool is_system_app = 3;
        bool is_updated_system_app = 4;
        string title = 5;
        string visibility = 6;
        string category = 7;
        string vibrate = 8;
        string sound = 9;
        string light_color = 10;
        bool is_posted = 11;
    }

    message PhysicalStat {
        string type = 1;
        int64 start_time = 2;
        int64 end_time = 3;
        float value = 4;
    }

    message Survey {
        string title = 1;
        string message = 2;
        string timeout_policy = 3;
        int64 timeout_sec = 4;
        int64 delivered_time = 5;
        int64 reaction_time = 6;
        int64 response_time = 7;
        string json = 8;
    }

    message DataTraffic {
        int64 from_time = 1;
        int64 to_time = 2;
        int64 rx_bytes = 3;
        int64 tx_bytes = 4;
        int64 mobile_rx_bytes = 5;
        int64 mobile_tx_bytes = 6;
    }

    message Wifi {
        string bssid = 1;
        string ssid = 2;
        int32 frequency = 3;
        int32 rssi = 4;
    }

    oneof data {
        PhysicalActivityTransition physical_activity_transition = 1;
        PhysicalActivity physical_activity = 2;
        AppUsageEvent app_usage_event = 3;
        Battery battery = 4;
        Bluetooth bluetooth = 5;
        CallLog call_log = 6;
        DeviceEvent device_event = 7;
        ExternalSensor external_sensor = 8;
        InstalledApp installed_app = 9;
        KeyLog key_log = 10;
        Location location = 11;
        Media media = 12;
        Message message = 13;
        Notification notification = 14;
        PhysicalStat physical_stat = 15;
        InternalSensor internal_sensor = 16;
        Survey survey = 17;
        DataTraffic data_traffic = 18;
        Wifi wifi = 19;
    }

    int64 timestamp = 20;
    float utc_offset = 21;
    string subject_email = 22;
    string device_info = 23;
    int64 upload_time = 24;

    message Query {
        message Data {
            Datum.Type data_type = 1;
            string subject_email = 2;
            int64 from_time = 3;
            int64 to_time = 4;
            int32 limit = 5;
            bool is_descending = 6;
        }
        message Subjects {
            Datum.Type data_type = 1;
            int64 from_time = 2;
            int64 to_time = 3;
            int32 limit = 4;
            bool is_descending = 5;
        }
    }
   
    message Data {
        repeated Datum data = 1;
        int32 n_results = 2;
        bool has_remaining = 3;
    }

    message Subjects {
        repeated string subject_email = 1;
    }
}

service DataOperations {
    rpc CreateDatum(Datum) returns (Empty) { }
    rpc ReadData(Datum.Query.Data) returns (Datum.Data) { }
    rpc ReadSubjects(Datum.Query.Subjects) returns (Datum.Subjects) { }
}